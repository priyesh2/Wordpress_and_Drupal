---
- name: "Wordpress or Drupal installation"
  hosts: ubuntu
  become: true
  vars_files:
    - combined.vars
  vars_prompt:
    - name: "install_mariadb"
      prompt: "Do you want to install MariaDB (yes/no)?"
      private: no

    - name: "extra_db"
      prompt: "Enter mysql extra database"
      private: no
      default: demo_db

    - name: "extra_user"
      prompt: "Enter mysql extra username"
      private: no
      default: demo_usr

    - name: "extra_pass"
      prompt: "Enter mysql extra password"
      private: yes
      salt_size: 15
      salt: "sample" 
  tasks:
    
    - name: "Pre Installation"
      become: yes
      apt_repository: repo=ppa:ondrej/php
      tags:
        - stack

    - name: "Installing nginx and php-fpm"
      apt:
        name: "{{ packs }}"
        state: present
        update_cache: yes
      tags:
        - stack

    - name: "Removing default conf"
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      ignore_errors: true
      tags:
        - stack

    - name: "Restarting and enabling services"
      service:
        name: "{{ item }}"
        state: restarted
        enabled: true
      with_items:
        - "nginx"
        - "php8.1-fpm"
      tags:
        - stack
 
    - name: "Installing needful packages"
      apt: 
        name: "{{ needs }}"
        state: present
      tags:
        - stack
        - mysql

    - name: "Installing mysql client"
      pip:
        name: mysqlclient
        state: present
      tags:
        - stack
        - mysql
 
    - name: "Installing mariadb-server"
      apt:
        name: "{{ packages }}"
        state: present  
      tags:
        - stack
        - mysql

    - name: "Restarting and enable mariadb-server"
      service:
        name: mariadb     
        state: restarted
        enabled: true
      when: install_mariadb | bool
      tags:
        - stack
        - mysql
     
    - name: "Copying template for mysql"
      template:
        src: my.cnf.tmpl
        dest: /root/.my.cnf
        owner: root
        group: root
        mode: 0600
      tags:
        - stack
        - mysql

    - name: "Setting root password"
      mysql_user:
        user: "{{ mysql_user }}"
        password: "{{ mysql_pass }}"
        host: "%"
      tags:
        - stack
        - mysql
        
    - name: "Remove anonymous user"
      mysql_user:
        user: ""
        host_all: true
        state: absent
      tags:
        - stack
        - mysql

    - name: "Remove test db"
      mysql_db:
        name: "test"
        state: absent
      tags:
        - stack
        - mysql
        
    - name: "Creating new database {{ extra_db }}"
      mysql_db:
        name: "{{ extra_db }}"
        state: present
      tags:
        - stack
        - mysql
   
    - name: "Creating new user {{ extra_user }}"
      mysql_user:
        user: "{{ extra_user }}"
        host: "%"
        password: "{{ extra_pass }}"
        priv: '{{ extra_db }}.*:ALL'
      tags:
        - stack
        - mysql 
  
    - name: "Creating document root for wordpress "
      file:
         path: "{{ wordpress_path }}"
         state: directory
         owner: "{{ nginx_owner }}"
         group: "{{ nginx_group }}"
      tags:
        - wordpress

    - name: "Creating vhost for wordpress"
      template:
        src: nginxconfub1.tmpl
        dest: "{{ wordpress_conf_dest }}"
        owner: "{{ nginx_conf_owner }}"
        group: "{{ nginx_conf_group }}"
      tags:
        - wordpress

    - name: "Downloading wordpress"
      get_url:
        url: "{{ wp_url }}"
        dest: /tmp/wordpress.tar.gz
      tags:
        - wordpress

    - name: "Extracting Wordpress archive"
      unarchive:
        src: /tmp/wordpress.tar.gz
        dest: /tmp/
        remote_src: true
      tags:
        - wordpress

    - name: "Copying files to documentroot /var/www/html/{{ wordpress_domain }}"
      copy:
        src: /tmp/wordpress/
        dest: "/var/www/html/{{ wordpress_domain }}"
        owner: "{{ nginx_owner }}"
        group: "{{ nginx_group }}"
        remote_src: true
      tags:
        - wordpress

    - name: "Creating wp-config.php from template"
      template:
        src: wordpress.config.tmpl
        dest: "/var/www/html/{{ wordpress_domain }}/wp-config.php"
        owner: "{{ nginx_owner }}"
        group: "{{ nginx_group }}"
      tags:
        - wordpress

    - name: "Creating document root for drupal "
      file:
         path: "{{ drupal_path }}"
         state: directory
         owner: "{{ nginx_owner }}"
         group: "{{ nginx_group }}"
      tags:
        - drupal

    - name: "Creating vhost for drupal"
      template:
        src: nginxconfub.tmpl
        dest: "{{ drupal_conf_dest }}"
        owner: "{{ nginx_conf_owner }}"
        group: "{{ nginx_conf_group }}"
      tags:
        - drupal
    
    - name: "Downloading drupal"
      get_url:
        url: "{{ drupal_url }}"
        dest: /tmp/drupal-10.0.0-rc1.tar.gztar.gz
      tags:
        - drupal

    - name: "Extracting drupal archive"
      unarchive:
        src: /tmp/drupal-10.0.0-rc1.tar.gztar.gz
        dest: /tmp/
        remote_src: true
      tags:
        - drupal

    - name: "Copying files to documentroot /var/www/html/{{ drupal_domain }}"
      copy:
        src: /tmp/drupal-10.0.0-rc1/
        dest: "/var/www/html/{{ drupal_domain }}"
        owner: "{{ nginx_owner }}"
        group: "{{ nginx_group }}"
        remote_src: true
      tags:
        - drupal

    - name: "Restarting services"
      service:
        name: "{{ item }}"
        state: restarted
        enabled: true
      with_items:
        - "mariadb"
        - "nginx"
        - "php8.1-fpm"
      tags:
        - stack
